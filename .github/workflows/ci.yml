name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: tbat_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        node-version: [20]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup npm
        run: npm --version
          
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript check
        run: npm run check-types
        
      - name: Setup test database
        env:
          TEST_DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/tbat_test
          REDIS_URL: redis://localhost:6379
        run: |
          cd apps/web
          npx prisma migrate deploy
          npx prisma generate
        
      - name: Run unit tests
        env:
          TEST_DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/tbat_test
          REDIS_URL: redis://localhost:6379
        run: |
          cd apps/web
          npm run test
        
      - name: Run database tests
        env:
          TEST_DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/tbat_test
          REDIS_URL: redis://localhost:6379
        run: |
          cd apps/web
          npm run test:db
        
      - name: Test migration rollback safety
        env:
          TEST_DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/tbat_test
        run: |
          cd apps/web
          npm run test:migration-rollback
        
      - name: Build packages
        run: npm run build

  deploy-preview:
    name: Deploy Preview (PR)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Preview deployment will be available once Vercel integration is configured.'
            })

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Production deployment ready
        run: echo "Production deployment ready for Vercel integration"